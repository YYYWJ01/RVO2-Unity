/*
 * Blocks.cs
 * RVO2 Library C#
 *
 * Copyright 2008 University of North Carolina at Chapel Hill
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Please send all bug reports to <geom@cs.unc.edu>.
 *
 * The authors may be contacted via:
 *
 * Jur van den Berg, Stephen J. Guy, Jamie Snape, Ming C. Lin, Dinesh Manocha
 * Dept. of Computer Science
 * 201 S. Columbia St.
 * Frederick P. Brooks, Jr. Computer Science Bldg.
 * Chapel Hill, N.C. 27599-3175
 * United States of America
 *
 * <http://gamma.cs.unc.edu/RVO2/>
 */

/*
 * Example file showing a demo with 100 agents split in four groups initially
 * positioned in four corners of the environment. Each agent attempts to move to
 * other side of the environment through a narrow passage generated by four
 * obstacles. There is no roadmap to guide the agents around the obstacles.
 */

#define RVO_OUTPUT_TIME_AND_POSITIONS
#define RVO_SEED_RANDOM_NUMBER_GENERATOR

using System;
using System.Collections.Generic;

namespace RVO
{
    class Blocks
    {
        /* 存储代理的目标。 */
        IList<Vector2> goals;

        /** 随机数生成器。 */
        Random random;

        Blocks()
        {
            goals = new List<Vector2>();

            #if RVO_SEED_RANDOM_NUMBER_GENERATOR
            random = new Random();
            #else
            random = new Random(0);
            #endif
        }

        void setupScenario()
        {
            /* 指定模拟的全局时间步长。 */
            Simulator.Instance.setTimeStep(0.25f);

            /*
             * 为随后添加的代理指定默认参数。
             */
            Simulator.Instance.setAgentDefaults(15.0f, 10, 5.0f, 5.0f, 2.0f, 2.0f, new Vector2(0.0f, 0.0f));

            /*
             * 添加代理，指定其起始位置，并将其目标存储在环境的另一侧。
             */
            for (int i = 0; i < 5; ++i)
            {
                for (int j = 0; j < 5; ++j)
                {
                    Simulator.Instance.addAgent(new Vector2(55.0f + i * 10.0f, 55.0f + j * 10.0f));
                    goals.Add(new Vector2(-75.0f, -75.0f));

                    Simulator.Instance.addAgent(new Vector2(-55.0f - i * 10.0f, 55.0f + j * 10.0f));
                    goals.Add(new Vector2(75.0f, -75.0f));

                    Simulator.Instance.addAgent(new Vector2(55.0f + i * 10.0f, -55.0f - j * 10.0f));
                    goals.Add(new Vector2(-75.0f, 75.0f));

                    Simulator.Instance.addAgent(new Vector2(-55.0f - i * 10.0f, -55.0f - j * 10.0f));
                    goals.Add(new Vector2(75.0f, 75.0f));
                }
            }

            /*
             * 添加（多边形）障碍物，按逆时针顺序指定其顶点。
             */
            IList<Vector2> obstacle1 = new List<Vector2>();
            obstacle1.Add(new Vector2(-10.0f, 40.0f));
            obstacle1.Add(new Vector2(-40.0f, 40.0f));
            obstacle1.Add(new Vector2(-40.0f, 10.0f));
            obstacle1.Add(new Vector2(-10.0f, 10.0f));
            Simulator.Instance.addObstacle(obstacle1);

            IList<Vector2> obstacle2 = new List<Vector2>();
            obstacle2.Add(new Vector2(10.0f, 40.0f));
            obstacle2.Add(new Vector2(10.0f, 10.0f));
            obstacle2.Add(new Vector2(40.0f, 10.0f));
            obstacle2.Add(new Vector2(40.0f, 40.0f));
            Simulator.Instance.addObstacle(obstacle2);

            IList<Vector2> obstacle3 = new List<Vector2>();
            obstacle3.Add(new Vector2(10.0f, -40.0f));
            obstacle3.Add(new Vector2(40.0f, -40.0f));
            obstacle3.Add(new Vector2(40.0f, -10.0f));
            obstacle3.Add(new Vector2(10.0f, -10.0f));
            Simulator.Instance.addObstacle(obstacle3);

            IList<Vector2> obstacle4 = new List<Vector2>();
            obstacle4.Add(new Vector2(-10.0f, -40.0f));
            obstacle4.Add(new Vector2(-10.0f, -10.0f));
            obstacle4.Add(new Vector2(-40.0f, -10.0f));
            obstacle4.Add(new Vector2(-40.0f, -40.0f));
            Simulator.Instance.addObstacle(obstacle4);

            /*
             * 处理障碍物，以便在模拟中考虑到它们。
             */
            Simulator.Instance.processObstacles();
        }

        #if RVO_OUTPUT_TIME_AND_POSITIONS
        void updateVisualization()
        {
            /* 输出当前的全局时间。 */
            Console.Write(Simulator.Instance.getGlobalTime());

            /* 输出所有智能体的当前位置。 */
            for (int i = 0; i < Simulator.Instance.getNumAgents(); ++i)
            {
                Console.Write(" {0}", Simulator.Instance.getAgentPosition(i));
            }

            Console.WriteLine();
        }
        #endif

        void setPreferredVelocities()
        {
            /*
             * 将首选速度设置为目标方向上单位幅度（速度）的向量。
             */
            for (int i = 0; i < Simulator.Instance.getNumAgents(); ++i)
            {
                Vector2 goalVector = goals[i] - Simulator.Instance.getAgentPosition(i);

                if (RVOMath.absSq(goalVector) > 1.0f)
                {
                    goalVector = RVOMath.normalize(goalVector);
                }

                Simulator.Instance.setAgentPrefVelocity(i, goalVector);

                /* 稍微扰动一下以避免由于完美对称而导致死锁。 */
                float angle = (float)random.NextDouble() * 2.0f * (float)Math.PI;
                float dist = (float)random.NextDouble() * 0.0001f;

                Simulator.Instance.setAgentPrefVelocity(i, Simulator.Instance.getAgentPrefVelocity(i) +
                    dist * new Vector2((float)Math.Cos(angle), (float)Math.Sin(angle)));
            }
        }

        bool reachedGoal()
        {
            /* 检查所有代理是否都达到了目标。 */
            for (int i = 0; i < Simulator.Instance.getNumAgents(); ++i)
            {
                if (RVOMath.absSq(Simulator.Instance.getAgentPosition(i) - goals[i]) > 400.0f)
                {
                    return false;
                }
            }

            return true;
        }

        public static void Main(string[] args)
        {
            Blocks blocks = new Blocks();

            /* 设置场景。 */
            blocks.setupScenario();

            /* 执行（并操纵）模拟。 */
            do
            {
                #if RVO_OUTPUT_TIME_AND_POSITIONS
                blocks.updateVisualization();
                #endif
                blocks.setPreferredVelocities();
                Simulator.Instance.doStep();
            }
            while (!blocks.reachedGoal());
        }
    }
}
